{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let MeetingService = /*#__PURE__*/(() => {\n  class MeetingService {\n    constructor() {\n      this.meetings = [{\n        id: 1,\n        clientId: 1,\n        clientName: 'John Smith',\n        title: 'Initial Consultation',\n        description: 'Discuss project requirements and timeline for residential design',\n        date: new Date('2024-11-05'),\n        time: '10:00',\n        duration: 60,\n        location: 'Office - Conference Room A',\n        type: 'consultation',\n        status: 'scheduled',\n        createdDate: new Date('2024-10-20')\n      }, {\n        id: 2,\n        clientId: 2,\n        clientName: 'Sarah Johnson',\n        title: 'Project Review Meeting',\n        description: 'Review initial commercial building designs and get client feedback',\n        date: new Date('2024-11-08'),\n        time: '14:00',\n        duration: 90,\n        location: 'Client Site - Johnson Corp',\n        type: 'project-review',\n        status: 'scheduled',\n        createdDate: new Date('2024-10-25')\n      }, {\n        id: 3,\n        clientId: 1,\n        clientName: 'John Smith',\n        title: 'Site Visit and Inspection',\n        description: 'Visit the construction site for progress inspection',\n        date: new Date('2024-10-28'),\n        time: '09:00',\n        duration: 120,\n        location: '123 Main St, Austin, TX',\n        type: 'site-visit',\n        status: 'completed',\n        createdDate: new Date('2024-10-15'),\n        notes: 'Site inspection completed successfully. Foundation work approved.'\n      }, {\n        id: 4,\n        clientId: 4,\n        clientName: 'Lisa Chen',\n        title: 'Design Presentation',\n        description: 'Present final tech campus design concepts',\n        date: new Date('2024-11-12'),\n        time: '15:30',\n        duration: 75,\n        location: 'Office - Main Conference Room',\n        type: 'presentation',\n        status: 'scheduled',\n        createdDate: new Date('2024-10-28')\n      }, {\n        id: 5,\n        clientId: 3,\n        clientName: 'Mike Davis',\n        title: 'Follow-up Discussion',\n        description: 'Follow up on mixed-use development proposal',\n        date: new Date('2024-11-15'),\n        time: '11:00',\n        duration: 45,\n        location: 'Virtual Meeting',\n        type: 'follow-up',\n        status: 'scheduled',\n        createdDate: new Date('2024-11-01')\n      }];\n      this.meetingsSubject = new BehaviorSubject(this.meetings);\n    }\n    getMeetings() {\n      return this.meetingsSubject.asObservable();\n    }\n    getMeetingById(id) {\n      return this.meetings.find(meeting => meeting.id === id);\n    }\n    getMeetingsByClient(clientId) {\n      return this.meetings.filter(meeting => meeting.clientId === clientId);\n    }\n    addMeeting(meeting) {\n      const newMeeting = {\n        ...meeting,\n        id: Math.max(...this.meetings.map(m => m.id)) + 1\n      };\n      this.meetings.push(newMeeting);\n      this.meetingsSubject.next([...this.meetings]);\n    }\n    updateMeeting(updatedMeeting) {\n      const index = this.meetings.findIndex(m => m.id === updatedMeeting.id);\n      if (index !== -1) {\n        this.meetings[index] = updatedMeeting;\n        this.meetingsSubject.next([...this.meetings]);\n      }\n    }\n    deleteMeeting(id) {\n      this.meetings = this.meetings.filter(m => m.id !== id);\n      this.meetingsSubject.next([...this.meetings]);\n    }\n    getUpcomingMeetings() {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      return this.meetings.filter(meeting => {\n        const meetingDate = new Date(meeting.date);\n        meetingDate.setHours(0, 0, 0, 0);\n        return meetingDate >= today && meeting.status === 'scheduled';\n      }).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n    }\n    getTodaysMeetings() {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      return this.meetings.filter(meeting => {\n        const meetingDate = new Date(meeting.date);\n        return meetingDate >= today && meetingDate < tomorrow && meeting.status === 'scheduled';\n      });\n    }\n    getMeetingsByDateRange(startDate, endDate) {\n      return this.meetings.filter(meeting => {\n        const meetingDate = new Date(meeting.date);\n        return meetingDate >= startDate && meetingDate <= endDate;\n      });\n    }\n    static {\n      this.ɵfac = function MeetingService_Factory(t) {\n        return new (t || MeetingService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: MeetingService,\n        factory: MeetingService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MeetingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}